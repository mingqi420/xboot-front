{"remainingRequest":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\xboot-components\\xboot-components.vue?vue&type=template&id=ce9e05b6&","dependencies":[{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\xboot-components\\xboot-components.vue","mtime":1600218271000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}