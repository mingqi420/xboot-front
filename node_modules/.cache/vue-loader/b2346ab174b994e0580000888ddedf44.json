{"remainingRequest":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\sys\\redis\\redisMonitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\sys\\redis\\redisMonitor.vue","mtime":1600218271000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGdldFJlZGlzS2V5U2l6ZSwgZ2V0UmVkaXNNZW1vcnksIGdldFJlZGlzSW5mbyB9IGZyb20gIkAvYXBpL2luZGV4IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJyZWRpc01vbml0b3IiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtZW1vcnk6IHsKICAgICAgICBzZXJpZXM6IFtdLAogICAgICAgIGNoYXJ0T3B0aW9uczogewogICAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZWFzaW5nOiAibGluZWFyIiwKICAgICAgICAgICAgICBkeW5hbWljQW5pbWF0aW9uOiB7CiAgICAgICAgICAgICAgICBzcGVlZDogNTAwMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbGJhcjogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHN0cm9rZTogewogICAgICAgICAgICBjdXJ2ZTogInNtb290aCIKICAgICAgICAgIH0sCiAgICAgICAgICB0aXRsZTogewogICAgICAgICAgICB0ZXh0OiAiUmVkaXPlhoXlrZjlrp7ml7bljaDnlKjmg4XlhrXvvIhLQu+8iSIsCiAgICAgICAgICAgIGFsaWduOiAibGVmdCIKICAgICAgICAgIH0sCiAgICAgICAgICBtYXJrZXJzOiB7CiAgICAgICAgICAgIHNpemU6IDAKICAgICAgICAgIH0sCiAgICAgICAgICB4YXhpczoge30sCiAgICAgICAgICB5YXhpczoge30sCiAgICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRhdGE6IFtdLAogICAgICAgIHhkYXRhOiBbXQogICAgICB9LAogICAgICBrZXk6IHsKICAgICAgICBzZXJpZXM6IFtdLAogICAgICAgIGNoYXJ0T3B0aW9uczogewogICAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZWFzaW5nOiAibGluZWFyIiwKICAgICAgICAgICAgICBkeW5hbWljQW5pbWF0aW9uOiB7CiAgICAgICAgICAgICAgICBzcGVlZDogNTAwMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9vbGJhcjogewogICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIGNvbG9yczogWyIjZjU1NjRlIl0sCiAgICAgICAgICBzdHJva2U6IHsKICAgICAgICAgICAgY3VydmU6ICJzbW9vdGgiCiAgICAgICAgICB9LAogICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgdGV4dDogIlJlZGlzIGtleeWunuaXtuaVsOmHj++8iOS4qu+8iSIsCiAgICAgICAgICAgIGFsaWduOiAibGVmdCIKICAgICAgICAgIH0sCiAgICAgICAgICBtYXJrZXJzOiB7CiAgICAgICAgICAgIHNpemU6IDAKICAgICAgICAgIH0sCiAgICAgICAgICB4YXhpczoge30sCiAgICAgICAgICB5YXhpczoge30sCiAgICAgICAgICBsZWdlbmQ6IHsKICAgICAgICAgICAgc2hvdzogZmFsc2UKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRhdGE6IFtdLAogICAgICAgIHhkYXRhOiBbXQogICAgICB9LAogICAgICBjb2x1bW5zOiBbCiAgICAgICAgewogICAgICAgICAga2V5OiAia2V5IiwKICAgICAgICAgIG1pbldpZHRoOiAyMDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGtleTogImRlc2NyaXB0aW9uIiwKICAgICAgICAgIG1pbldpZHRoOiA1MDAKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGtleTogInZhbHVlIiwKICAgICAgICAgIHdpZHRoOiA0MDAKICAgICAgICB9CiAgICAgIF0sCiAgICAgIHJlZGlzSW5mbzogW10sCiAgICAgIHRpbWVyOiBudWxsCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgaW5pdCgpIHsKICAgICAgdGhpcy5nZXREYXRhKCk7CiAgICAgIHRoaXMuZ2V0SW5mbygpOwogICAgfSwKICAgIC8vIOe7n+iuoQogICAgZ2V0RGF0YSgpIHsKICAgICAgbGV0IG1pbk1lbW9yeSA9IDFlMTA7CiAgICAgIGxldCBtaW5TaXplID0gMWUxMDsKICAgICAgbGV0IG1heE1lbW9yeSA9IC0xZTEwOwogICAgICBsZXQgbWF4U2l6ZSA9IC0xZTEwOwogICAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgIC8vIOWGheWtmAogICAgICAgIGdldFJlZGlzTWVtb3J5KCkudGhlbihyZXMgPT4gewogICAgICAgICAgbGV0IGN1cnJlbnRNZW1vcnkgPSBOdW1iZXIocmVzLnJlc3VsdC5tZW1vcnkpIC8gMTAyNDsKICAgICAgICAgIC8vIOabtOaWsOacgOWkp+acgOWwj+WAvAogICAgICAgICAgaWYgKGN1cnJlbnRNZW1vcnkgPCBtaW5NZW1vcnkpIHsKICAgICAgICAgICAgbWluTWVtb3J5ID0gY3VycmVudE1lbW9yeTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChjdXJyZW50TWVtb3J5ID4gbWF4TWVtb3J5KSB7CiAgICAgICAgICAgIG1heE1lbW9yeSA9IGN1cnJlbnRNZW1vcnk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5tZW1vcnkuZGF0YS5wdXNoKE51bWJlcihjdXJyZW50TWVtb3J5LnRvRml4ZWQoMikpKTsKICAgICAgICAgIHRoaXMubWVtb3J5LnhkYXRhLnB1c2gocmVzLnJlc3VsdC50aW1lKTsKICAgICAgICAgIC8vIDXkuKrngrkKICAgICAgICAgIGlmICh0aGlzLm1lbW9yeS5kYXRhLmxlbmd0aCA+PSA2KSB7CiAgICAgICAgICAgIHRoaXMubWVtb3J5LmRhdGEuc2hpZnQoKTsKICAgICAgICAgICAgdGhpcy5tZW1vcnkueGRhdGEuc2hpZnQoKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vIOabtOaWsOeCueS/oeaBrwogICAgICAgICAgdGhpcy4kcmVmcy5tZW1vcnlJbmZvLnVwZGF0ZVNlcmllcyhbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAi5YaF5a2YKEtCKSIsCiAgICAgICAgICAgICAgZGF0YTogdGhpcy5tZW1vcnkuZGF0YQogICAgICAgICAgICB9CiAgICAgICAgICBdKTsKCiAgICAgICAgICAvLyDmm7TmlrDmnIDlpKfmnIDlsI/lgLwKICAgICAgICAgIHRoaXMuJHJlZnMubWVtb3J5SW5mby51cGRhdGVPcHRpb25zKAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IHRoaXMubWVtb3J5LnhkYXRhCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB5YXhpczogewogICAgICAgICAgICAgICAgbWluOiBtaW5NZW1vcnkgLSAyLAogICAgICAgICAgICAgICAgbWF4OiBtYXhNZW1vcnkgKyAyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB0cnVlLAogICAgICAgICAgICB0cnVlCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICAgIC8vIOmUruWAvAogICAgICAgIGdldFJlZGlzS2V5U2l6ZSgpLnRoZW4ocmVzID0+IHsKICAgICAgICAgIGxldCBjdXJyZW50U2l6ZSA9IHJlcy5yZXN1bHQua2V5U2l6ZTsKICAgICAgICAgIC8vIOabtOaWsOacgOWkp+acgOWwj+WAvAogICAgICAgICAgaWYgKGN1cnJlbnRTaXplIDwgbWluU2l6ZSkgewogICAgICAgICAgICBtaW5TaXplID0gY3VycmVudFNpemU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY3VycmVudFNpemUgPiBtYXhTaXplKSB7CiAgICAgICAgICAgIG1heFNpemUgPSBjdXJyZW50U2l6ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmtleS5kYXRhLnB1c2goY3VycmVudFNpemUpOwogICAgICAgICAgdGhpcy5rZXkueGRhdGEucHVzaChyZXMucmVzdWx0LnRpbWUpOwogICAgICAgICAgLy8gNeS4queCuQogICAgICAgICAgaWYgKHRoaXMua2V5LmRhdGEubGVuZ3RoID49IDYpIHsKICAgICAgICAgICAgdGhpcy5rZXkuZGF0YS5zaGlmdCgpOwogICAgICAgICAgICB0aGlzLmtleS54ZGF0YS5zaGlmdCgpOwogICAgICAgICAgfQogICAgICAgICAgLy8g5pu05paw54K55L+h5oGvCiAgICAgICAgICB0aGlzLiRyZWZzLmtleVNpemUudXBkYXRlU2VyaWVzKFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrZXnmlbDph48iLAogICAgICAgICAgICAgIGRhdGE6IHRoaXMua2V5LmRhdGEKICAgICAgICAgICAgfQogICAgICAgICAgXSk7CiAgICAgICAgICAvLyDmm7TmlrDmnIDlpKfmnIDlsI/lgLwKICAgICAgICAgIHRoaXMuJHJlZnMua2V5U2l6ZS51cGRhdGVPcHRpb25zKAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IHRoaXMua2V5LnhkYXRhCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAvLyDpgb/lhY3mnIDlpKfmnIDlsI/lgLzkuIDoh7QKICAgICAgICAgICAgICB5YXhpczogewogICAgICAgICAgICAgICAgbWluOiBtaW5TaXplIC0gMiwKICAgICAgICAgICAgICAgIG1heDogbWF4U2l6ZSArIDIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRydWUsCiAgICAgICAgICAgIHRydWUKICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICAgIH0sIDUwMDApOwogICAgfSwKICAgIGdldEluZm8oKSB7CiAgICAgIGdldFJlZGlzSW5mbygpLnRoZW4ocmVzID0+IHsKICAgICAgICBsZXQgZGF0YSA9IFtdOwogICAgICAgIHJlcy5yZXN1bHQuZm9yRWFjaChlID0+IHsKICAgICAgICAgIGlmIChlLmRlc2NyaXB0aW9uKSB7CiAgICAgICAgICAgIGRhdGEucHVzaChlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICB0aGlzLnJlZGlzSW5mbyA9IGRhdGE7CiAgICAgIH0pOwogICAgfQogIH0sCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIGlmICh0aGlzLnRpbWVyKSB7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5pbml0KCk7CiAgfQp9Owo="},{"version":3,"sources":["redisMonitor.vue"],"names":[],"mappingsfile":"redisMonitor.vue","sourceRoot":"src/views/sys/redis","sourcesContent":["<template>\n  <div>\n    <Row>\n      <Col span=\"12\">\n        <apexchart\n          ref=\"memoryInfo\"\n          type=\"area\"\n          height=\"350\"\n          :options=\"memory.chartOptions\"\n          :series=\"memory.series\"\n        />\n      </Col>\n      <Col span=\"12\">\n        <apexchart\n          ref=\"keySize\"\n          type=\"area\"\n          height=\"350\"\n          :options=\"key.chartOptions\"\n          :series=\"key.series\"\n        />\n      </Col>\n    </Row>\n    <Row>\n      <Divider orientation=\"left\">Redis详细信息</Divider>\n      <Table :columns=\"columns\" :data=\"redisInfo\" :show-header=\"false\"></Table>\n    </Row>\n  </div>\n</template>\n\n<script>\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\nexport default {\n  name: \"redisMonitor\",\n  data() {\n    return {\n      memory: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis内存实时占用情况（KB）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      key: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          colors: [\"#f5564e\"],\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis key实时数量（个）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      columns: [\n        {\n          key: \"key\",\n          minWidth: 200\n        },\n        {\n          key: \"description\",\n          minWidth: 500\n        },\n        {\n          key: \"value\",\n          width: 400\n        }\n      ],\n      redisInfo: [],\n      timer: null\n    };\n  },\n  methods: {\n    init() {\n      this.getData();\n      this.getInfo();\n    },\n    // 统计\n    getData() {\n      let minMemory = 1e10;\n      let minSize = 1e10;\n      let maxMemory = -1e10;\n      let maxSize = -1e10;\n      this.timer = setInterval(() => {\n        // 内存\n        getRedisMemory().then(res => {\n          let currentMemory = Number(res.result.memory) / 1024;\n          // 更新最大最小值\n          if (currentMemory < minMemory) {\n            minMemory = currentMemory;\n          }\n          if (currentMemory > maxMemory) {\n            maxMemory = currentMemory;\n          }\n\n          this.memory.data.push(Number(currentMemory.toFixed(2)));\n          this.memory.xdata.push(res.result.time);\n          // 5个点\n          if (this.memory.data.length >= 6) {\n            this.memory.data.shift();\n            this.memory.xdata.shift();\n          }\n          // 更新点信息\n          this.$refs.memoryInfo.updateSeries([\n            {\n              name: \"内存(KB)\",\n              data: this.memory.data\n            }\n          ]);\n\n          // 更新最大最小值\n          this.$refs.memoryInfo.updateOptions(\n            {\n              xaxis: {\n                categories: this.memory.xdata\n              },\n              yaxis: {\n                min: minMemory - 2,\n                max: maxMemory + 2\n              }\n            },\n            true,\n            true\n          );\n        });\n        // 键值\n        getRedisKeySize().then(res => {\n          let currentSize = res.result.keySize;\n          // 更新最大最小值\n          if (currentSize < minSize) {\n            minSize = currentSize;\n          }\n          if (currentSize > maxSize) {\n            maxSize = currentSize;\n          }\n\n          this.key.data.push(currentSize);\n          this.key.xdata.push(res.result.time);\n          // 5个点\n          if (this.key.data.length >= 6) {\n            this.key.data.shift();\n            this.key.xdata.shift();\n          }\n          // 更新点信息\n          this.$refs.keySize.updateSeries([\n            {\n              name: \"key数量\",\n              data: this.key.data\n            }\n          ]);\n          // 更新最大最小值\n          this.$refs.keySize.updateOptions(\n            {\n              xaxis: {\n                categories: this.key.xdata\n              },\n              // 避免最大最小值一致\n              yaxis: {\n                min: minSize - 2,\n                max: maxSize + 2\n              }\n            },\n            true,\n            true\n          );\n        });\n      }, 5000);\n    },\n    getInfo() {\n      getRedisInfo().then(res => {\n        let data = [];\n        res.result.forEach(e => {\n          if (e.description) {\n            data.push(e);\n          }\n        });\n        this.redisInfo = data;\n      });\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};\n</script>\n<style lang=\"less\">\n</style>"]}]}