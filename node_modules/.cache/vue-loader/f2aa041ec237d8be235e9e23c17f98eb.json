{"remainingRequest":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\main-components\\shrinkable-menu\\components\\sidebarMenu.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\src\\views\\main-components\\shrinkable-menu\\components\\sidebarMenu.vue","mtime":1600218271000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dove\\project\\xboot\\xboot-front-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIi4uL3N0eWxlcy9tZW51Lmxlc3MiOwo="},{"version":3,"sources":["sidebarMenu.vue"],"names":[],"mappings":";AACA","file":"sidebarMenu.vue","sourceRoot":"src/views/main-components/shrinkable-menu/components","sourcesContent":["<style lang=\"less\">\n@import \"../styles/menu.less\";\n</style>\n<template>\n  <Menu\n    ref=\"sideMenu\"\n    accordion\n    :active-name=\"$route.name\"\n    :open-names=\"singleOpenName\"\n    :theme=\"menuTheme\"\n    width=\"auto\"\n    @on-select=\"changeMenu\"\n  >\n    <template v-for=\"item in menuList\">\n      <!-- 如果是一级菜单并设置了不一直显示 -->\n      <template v-if=\"item.level=='1'&&!item.showAlways\">\n        <MenuItem\n          v-if=\"item.children.length <= 1\"\n          :name=\"item.children[0].name\"\n          :key=\"'menuitem' + item.name\"\n        >\n          <Icon\n            :type=\"item.children[0].icon || item.icon\"\n            :size=\"iconSize\"\n            :key=\"'menuicon' + item.name\"\n          ></Icon>\n          <span class=\"layout-text\" :key=\"'title' + item.name\">{{ itemTitle(item.children[0]) }}</span>\n        </MenuItem>\n        <Submenu v-if=\"item.children.length > 1\" :name=\"item.name\" :key=\"item.name\">\n          <template slot=\"title\">\n            <Icon :type=\"item.icon\" :size=\"iconSize\"></Icon>\n            <span class=\"layout-text\">{{ itemTitle(item) }}</span>\n          </template>\n          <template v-for=\"child in item.children\">\n            <MenuItem :name=\"child.name\" :key=\"'menuitem' + child.name\">\n              <Icon :type=\"child.icon\" :size=\"iconSize\" :key=\"'icon' + child.name\"></Icon>\n              <span class=\"layout-text\" :key=\"'title' + child.name\">{{ itemTitle(child) }}</span>\n            </MenuItem>\n          </template>\n        </Submenu>\n      </template>\n      <template v-else>\n        <Submenu :name=\"item.name\" :key=\"item.name\">\n          <template slot=\"title\">\n            <Icon :type=\"item.icon\" :size=\"iconSize\"></Icon>\n            <span class=\"layout-text\">{{ itemTitle(item) }}</span>\n          </template>\n          <template v-for=\"child in item.children\">\n            <MenuItem :name=\"child.name\" :key=\"'menuitem' + child.name\">\n              <Icon :type=\"child.icon\" :size=\"iconSize\" :key=\"'icon' + child.name\"></Icon>\n              <span class=\"layout-text\" :key=\"'title' + child.name\">{{ itemTitle(child) }}</span>\n            </MenuItem>\n          </template>\n        </Submenu>\n      </template>\n    </template>\n  </Menu>\n</template>\n\n<script>\nexport default {\n  name: \"sidebarMenu\",\n  data() {\n    return {\n      singleOpenName: []\n    };\n  },\n  props: {\n    menuList: Array,\n    iconSize: Number,\n    menuTheme: {\n      type: String,\n      default: \"dark\"\n    },\n    openNames: {\n      type: Array\n    }\n  },\n  methods: {\n    changeMenu(active) {\n      this.$emit(\"on-change\", active);\n    },\n    handleSelect(name) {\n      this.$emit(\"on-select\", name);\n    },\n    itemTitle(item) {\n      if (typeof item.title == \"object\") {\n        return this.$t(item.title.i18n);\n      } else {\n        return item.title;\n      }\n    },\n    getOpenedNamesByActiveName(name) {\n      return this.$route.matched\n        .map(item => item.name)\n        .filter(item => item !== name);\n    }\n  },\n  updated() {\n    this.$nextTick(() => {\n      if (this.$refs.sideMenu) {\n        this.$refs.sideMenu.updateOpened();\n      }\n    });\n  },\n  watch: {\n    // 监听路由变化\n    $route(to, from) {\n      this.singleOpenName = [this.$route.matched[0].name];\n    }\n  },\n  mounted() {\n    this.singleOpenName = [this.$route.matched[0].name];\n  }\n};\n</script>\n"]}]}